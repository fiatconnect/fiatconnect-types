// Generated by ts-to-zod
import { z } from 'zod'
import {
  TransferType,
  TransferStatus,
  KycStatus,
  FeeType,
  FeeFrequency,
  WebhookEventType,
  FiatConnectError,
  Network,
  FiatType,
  CryptoType,
  KycSchema,
  FiatAccountSchema,
  FiatAccountType,
  SupportedOperatorEnum,
} from './index'

export const clockResponseSchema = z.object({
  time: z.string(),
})

export const authRequestBodySchema = z.object({
  message: z.string(),
  signature: z.string(),
})


export const transferRequestBodySchema = z.object({
  fiatAccountId: z.string(),
  quoteId: z.string(),
})

export const transferStatusRequestParamsSchema = z.object({
  transferId: z.string(),
})

export const fiatAccountIdSchema = z.string()

export const transferTypeSchema = z.nativeEnum(TransferType)

export const transferStatusSchema = z.nativeEnum(TransferStatus)

export const kycStatusSchema = z.nativeEnum(KycStatus)

export const feeTypeSchema = z.nativeEnum(FeeType)

export const feeFrequencySchema = z.nativeEnum(FeeFrequency)

export const webhookEventTypeSchema = z.nativeEnum(WebhookEventType)

export const fiatConnectErrorSchema = z.nativeEnum(FiatConnectError)

export const networkSchema = z.nativeEnum(Network)

export const fiatTypeSchema = z.nativeEnum(FiatType)

export const cryptoTypeSchema = z.nativeEnum(CryptoType)

export const kycSchemaSchema = z.nativeEnum(KycSchema)

export const fiatAccountSchemaSchema = z.enum(['AccountNumber', 'MobileMoney', 'DuniaWallet', 'IBANNumber', 'IFSCAccount'])

export const fiatAccountTypeSchema = z.nativeEnum(FiatAccountType)

export const obfuscatedFiatAccountDataSchema = z.object({
  fiatAccountId: z.string(),
  accountName: z.string(),
  institutionName: z.string(),
  fiatAccountType: fiatAccountTypeSchema,
  fiatAccountSchema: fiatAccountSchemaSchema,
})

export const getFiatAccountsResponseSchema = z.record(fiatAccountTypeSchema, z.array(obfuscatedFiatAccountDataSchema))


const requiredFiatAccountSchemaFieldsSchema = z.object({
  accountName: z.string(),
  institutionName: z.string(),
  fiatAccountType: fiatAccountTypeSchema,
})

export const accountNumberSchema = requiredFiatAccountSchemaFieldsSchema.and(
  z.object({
    accountNumber: z.string(),
    country: z.string(),
    fiatAccountType: z.literal(FiatAccountType.BankAccount),
  }),
)

export const duniaWalletSchema = requiredFiatAccountSchemaFieldsSchema.and(
  z.object({
    mobile: z.string(),
    fiatAccountType: z.literal(FiatAccountType.DuniaWallet),
  }),
)

export const iBANNumberSchema = requiredFiatAccountSchemaFieldsSchema.and(
  z.object({
    iban: z.string(),
    country: z.string(),
    fiatAccountType: z.literal(FiatAccountType.BankAccount),
  }),
)

export const iFSCAccountSchema = requiredFiatAccountSchemaFieldsSchema.and(
  z.object({
    ifsc: z.string(),
    accountNumber: z.string(),
    country: z.string(),
    fiatAccountType: z.literal(FiatAccountType.BankAccount),
  }),
)

export const supportedOperatorEnumSchema = z.nativeEnum(SupportedOperatorEnum)

export const personalDataAndDocumentsKycSchema = z.object({
  firstName: z.string(),
  middleName: z.string().optional(),
  lastName: z.string(),
  dateOfBirth: z.object({
    day: z.string(),
    month: z.string(),
    year: z.string(),
  }),
  address: z.object({
    address1: z.string(),
    address2: z.string().optional(),
    isoCountryCode: z.string(),
    isoRegionCode: z.string(),
    city: z.string(),
    postalCode: z.string().optional(),
  }),
  phoneNumber: z.string(),
  selfieDocument: z.string(),
  identificationDocument: z.string(),
})

export const quoteRequestBodySchema = z.object({
  fiatType: fiatTypeSchema,
  cryptoType: cryptoTypeSchema,
  address: z.string(),
  fiatAmount: z.string().optional(),
  cryptoAmount: z.string().optional(),
  country: z.string(),
  region: z.string().optional(),
})

export const quoteErrorResponseSchema = z.object({
  error: fiatConnectErrorSchema,
  minimumFiatAmount: z.string().optional(),
  maximumFiatAmount: z.string().optional(),
  minimumCryptoAmount: z.string().optional(),
  maximumCryptoAmount: z.string().optional(),
})

export const kycRequestParamsSchema = z.object({
  kycSchema: kycSchemaSchema,
})

export const kycStatusResponseSchema = z.object({
  kycStatus: kycStatusSchema,
})

export const deleteFiatAccountRequestParamsSchema = z.object({
  fiatAccountId: fiatAccountIdSchema,
})

export const transferResponseSchema = z.object({
  transferId: z.string(),
  transferStatus: transferStatusSchema,
  transferAddress: z.string(),
})

export const transferStatusResponseSchema = z.object({
  status: transferStatusSchema,
  transferType: transferTypeSchema,
  fiatType: fiatTypeSchema,
  cryptoType: cryptoTypeSchema,
  amountProvided: z.string(),
  amountReceived: z.string(),
  fee: z.string().optional(),
  fiatAccountId: z.string(),
  transferId: z.string(),
  transferAddress: z.string(),
})

export const webhookRequestBodySchema = z.union([
  z.object({
    eventType: z.literal(WebhookEventType.KycStatusEvent),
    provider: z.string(),
    eventId: z.string(),
    timestamp: z.string(),
    address: z.string(),
    payload: z.object({
      kycSchema: kycSchemaSchema,
      kycStatus: kycStatusSchema,
    }),
  }),
  z.object({
    eventType: z.literal(WebhookEventType.TransferInStatusEvent),
    provider: z.string(),
    eventId: z.string(),
    timestamp: z.string(),
    address: z.string(),
    payload: transferStatusResponseSchema,
  }),
  z.object({
    eventType: z.literal(WebhookEventType.TransferOutStatusEvent),
    provider: z.string(),
    eventId: z.string(),
    timestamp: z.string(),
    address: z.string(),
    payload: transferStatusResponseSchema,
  }),
])

export const mobileMoneySchema = requiredFiatAccountSchemaFieldsSchema.and(
  z.object({
    mobile: z.string(),
    country: z.string(),
    operator: supportedOperatorEnumSchema,
    fiatAccountType: z.literal(FiatAccountType.MobileMoney),
  }),
)

export const quoteResponseKycSchemaSchema = z.object({
  kycSchema: kycSchemaSchema,
  allowedValues: z.record(z.array(z.string())),
})

export const quoteResponseFiatAccountSchemaSchema = z.object({
  fiatAccountSchema: fiatAccountSchemaSchema,
  allowedValues: z.record(z.array(z.string())),
})

export const fiatAccountTypeQuoteDataSchema = z.object({
  fiatAccountSchemas: z.array(quoteResponseFiatAccountSchemaSchema),
  settlementTimeLowerBound: z.string().optional(),
  settlementTimeUpperBound: z.string().optional(),
})

export const quoteResponseSchema = z.object({
  quote: z.object({
    fiatType: fiatTypeSchema,
    cryptoType: cryptoTypeSchema,
    fiatAmount: z.string(),
    cryptoAmount: z.string(),
    guaranteedUntil: z.string(),
    quoteId: z.string(),
    transferType: transferTypeSchema,
    fee: z.string().optional(),
    feeType: feeTypeSchema.optional(),
    feeFrequency: feeFrequencySchema.optional(),
  }),
  kyc: z.object({
    kycRequired: z.boolean(),
    kycSchemas: z.array(quoteResponseKycSchemaSchema),
  }),
  fiatAccount: z.record(fiatAccountTypeSchema, fiatAccountTypeQuoteDataSchema),
})

export const postFiatAccountRequestBodySchema = z.union([
  z.object({
    fiatAccountSchema: z.literal(fiatAccountSchemaSchema.enum.AccountNumber),
    data: accountNumberSchema,
  }),
  z.object({
    fiatAccountSchema: z.literal(fiatAccountSchemaSchema.enum.DuniaWallet),
    data: duniaWalletSchema,
  }),
  z.object({
    fiatAccountSchema: z.literal(fiatAccountSchemaSchema.enum.MobileMoney),
    data: mobileMoneySchema,
  }),
  z.object({
    fiatAccountSchema: z.literal(fiatAccountSchemaSchema.enum.IBANNumber),
    data: iBANNumberSchema,
  }),
  z.object({
    fiatAccountSchema: z.literal(fiatAccountSchemaSchema.enum.IFSCAccount),
    data: iFSCAccountSchema,
  }),
])

export const postFiatAccountResponseSchema = obfuscatedFiatAccountDataSchema
